B-Ağaçları  


class BTreeNode {
    int[] keys;
    BTreeNode[] children;
    int numKeys;
    boolean isLeaf;

    public BTreeNode(int order, boolean isLeaf) {
        this.keys = new int[order - 1];
        this.children = new BTreeNode[order];
        this.numKeys = 0;
        this.isLeaf = isLeaf;
    }
}

public class BTree {
    private BTreeNode root;
    private int order;

    public BTree(int order) {
        this.root = null;
        this.order = order;
    }

    public void insert(int key) {
        if (root == null) {
            root = new BTreeNode(order, true);
            root.keys[0] = key;
            root.numKeys = 1;
        } else {
            if (root.numKeys == order - 1) {
                BTreeNode newRoot = new BTreeNode(order, false);
                newRoot.children[0] = root;
                splitChild(newRoot, 0);
                root = newRoot;
            }
            insertNonFull(root, key);
        }
    }

    private void insertNonFull(BTreeNode node, int key) {
        int i = node.numKeys - 1;

        if (node.isLeaf) {
            while (i >= 0 && key < node.keys[i]) {
                node.keys[i + 1] = node.keys[i];
                i--;
            }
            node.keys[i + 1] = key;
            node.numKeys++;
        } else {
            while (i >= 0 && key < node.keys[i]) {
                i--;
            }

            i++;

            if (node.children[i].numKeys == order - 1) {
                splitChild(node, i);

                if (key > node.keys[i]) {
                    i++;
                }
            }
            insertNonFull(node.children[i], key);
        }
    }

    private void splitChild(BTreeNode parent, int index) {
        BTreeNode child = parent.children[index];
        BTreeNode newChild = new BTreeNode(order, child.isLeaf);
        parent.numKeys++;

        for (int i = order / 2 - 1; i < child.numKeys; i++) {
            newChild.keys[i - order / 2 + 1] = child.keys[i];
            child.keys[i] = 0;
        }

        for (int i = order / 2; i < child.numKeys + 1; i++) {
            newChild.children[i - order / 2] = child.children[i];
            child.children[i] = null;
        }

        child.numKeys = order / 2 - 1;

        for (int i = parent.numKeys - 1; i > index; i--) {
            parent.children[i + 1] = parent.children[i];
        }

        parent.children[index + 1] = newChild;

        for (int i = parent.numKeys - 1; i > index - 1; i--) {
            parent.keys[i] = parent.keys[i - 1];
        }

        parent.keys[index] = child.keys[order / 2 - 1];
        child.keys[order / 2 - 1] = 0;
    }

    public static void main(String[] args) {
        BTree bTree = new BTree(3);

        bTree.insert(10);
        bTree.insert(20);
        bTree.insert(5);
        bTree.insert(6);
        bTree.insert(12);

 
    }
}
