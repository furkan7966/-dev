Max-Min Heap Tree


public class MaxMinHeap {
    private int[] heap;
    private int size;
    private static final int MAX_HEAP_SIZE = 100;

    public MaxMinHeap() {
        heap = new int[MAX_HEAP_SIZE];
        size = 0;
    }

    public void insert(int value) {
        if (size == MAX_HEAP_SIZE) {
            System.out.println("Heap is full. Cannot insert more elements.");
            return;
        }

        heap[size] = value;
        heapifyUp(size);
        size++;
    }

    private void heapifyUp(int index) {
        int parentIndex = (index - 1) / 2;

        while (index > 0 && heap[index] > heap[parentIndex]) {
            swap(index, parentIndex);
            index = parentIndex;
            parentIndex = (index - 1) / 2;
        }
    }

    private void swap(int i, int j) {
        int temp = heap[i];
        heap[i] = heap[j];
        heap[j] = temp;
    }

    public int extractMax() {
        if (size == 0) {
            System.out.println("Heap is empty. Cannot extract max element.");
            return -1; // Assuming -1 represents an invalid value.
        }

        int max = heap[0];
        heap[0] = heap[size - 1];
        size--;
        heapifyDown(0);
        return max;
    }

    private void heapifyDown(int index) {
        int leftChildIndex = 2 * index + 1;
        int rightChildIndex = 2 * index + 2;
        int largest = index;

        if (leftChildIndex < size && heap[leftChildIndex] > heap[largest]) {
            largest = leftChildIndex;
        }

        if (rightChildIndex < size && heap[rightChildIndex] > heap[largest]) {
            largest = rightChildIndex;
        }

        if (largest != index) {
            swap(index, largest);
            heapifyDown(largest);
        }
    }

    public void printHeap() {
        for (int i = 0; i < size; i++) {
            System.out.print(heap[i] + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        MaxMinHeap maxMinHeap = new MaxMinHeap();

        maxMinHeap.insert(4);
        maxMinHeap.insert(10);
        maxMinHeap.insert(3);
        maxMinHeap.insert(5);
        maxMinHeap.insert(1);

        System.out.println("Max-Min Heap after insertions:");
        maxMinHeap.printHeap();

        int max = maxMinHeap.extractMax();
        System.out.println("Max element extracted: " + max);

        System.out.println("Max-Min Heap after extraction:");
        maxMinHeap.printHeap();
    }
}
