Graflar ve Gösterimler

import java.util.*;

// Graph sınıfı, bir grafı temsil eder
class Graph {
    private int vertices;
    private LinkedList<Integer>[] adjacencyList;

    // Graph sınıfının kurucusu
    public Graph(int vertices) {
        this.vertices = vertices;
        this.adjacencyList = new LinkedList[vertices];

        for (int i = 0; i < vertices; i++) {
            adjacencyList[i] = new LinkedList<>();
        }
    }

    // Graf'a kenar eklemek için kullanılan metod
    public void addEdge(int source, int destination) {
        adjacencyList[source].add(destination);
        adjacencyList[destination].add(source);
    }

    // Grafı BFS algoritması ile dolaşmak için kullanılan metod
    public void bfs(int startVertex) {
        boolean[] visited = new boolean[vertices];
        Queue<Integer> queue = new LinkedList<>();

        visited[startVertex] = true;
        queue.add(startVertex);

        while (!queue.isEmpty()) {
            int currentVertex = queue.poll();
            System.out.print(currentVertex + " ");

            for (int neighbor : adjacencyList[currentVertex]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.add(neighbor);
                }
            }
        }
    }

    // Grafı DFS algoritması ile dolaşmak için kullanılan metod
    public void dfs(int startVertex) {
        boolean[] visited = new boolean[vertices];
        dfsRecursive(startVertex, visited);
    }

    private void dfsRecursive(int currentVertex, boolean[] visited) {
        visited[currentVertex] = true;
        System.out.print(currentVertex + " ");

        for (int neighbor : adjacencyList[currentVertex]) {
            if (!visited[neighbor]) {
                dfsRecursive(neighbor, visited);
            }
        }
    }
}

public class GraphExample {
    public static void main(String[] args) {
        // 5 düğümlü bir graf oluşturuluyor
        Graph graph = new Graph(5);

        // Kenarlar ekleniyor
        graph.addEdge(0, 1);
        graph.addEdge(0, 4);
        graph.addEdge(1, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 3);
        graph.addEdge(3, 4);

        // BFS algoritması ile graf dolaşılıyor
        System.out.println("BFS Dolaşma:");
        graph.bfs(0);
        System.out.println();

        // DFS algoritması ile graf dolaşılıyor
        System.out.println("DFS Dolaşma:");
        graph.dfs(0);
    }
}